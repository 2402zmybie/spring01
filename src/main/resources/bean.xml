<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!--第一种方法: 使用默认的构造函数.
        在spring的配置文件中使用bean标签,配以id和class属性之后,且没有其他标签时,使用默认的构造函数创建
        (重写有参构造方法之后,一定要重写无参构造)
        <bean id="accountService" class="com.hr.service.impl.AccountServiceImpl"/>
    -->

    <!--第二种方法(在jar包中的类的某个方法): 使用普通工厂中的方法创建对象(使用某个类中的方法创建对象,并存入容器中)-->
    <!--<bean id="instanceFactory" class="com.hr.factory.InstanceFactory"/>
    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"/>-->

    <!--第三种方法(在jar包中的类的某个方法): 使用工厂中的静态方法创建对象(使用某个类中的静态方法创建对象,并存入容器中)-->
    <!--<bean id="accountService" class="com.hr.factory.StaticFactory" factory-method="getAccountService"/>-->

    <!--
    bean对象的生命周期:
        单例对象:
            出生: 当容器创建时对象出生
            活着: 只要容器还在,对象一直活着
            死亡: 容器销毁,对象消亡
            死亡: 单例对象的生命周期和容器相同
        多例对象:
            出生: 当我们get对象的时候(使用对象)时spring框架为我们创建
            活着: 对象只要是在使用过程中就一直活着
            死亡: 当对象长时间不用,且没有别的对象引用时候,由Java的垃圾回收器回收

    -->

    <bean id="accountService" class="com.hr.service.impl.AccountServiceImpl" scope="prototype"
        init-method="init" destroy-method="destory"
    />

</beans>

