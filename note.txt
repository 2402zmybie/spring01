两个容器:
    ApplicationContext: 顶级父类是BeanFactory, 但是创建对象的策略是立即加载的方式,只要一读完配置文件就马上创建配置文件中
                        的对象 (单例对象适用: Servlet, Service等)
    BeanFactory: :延迟加载, 什么时候根据id获取对象了, 什么时候才真正的创建对象 (多例对象适用)

Spring对bean的管理细节:
    1 创建bean的三种方式
        第一种方法: 使用默认构造函数创建
        第二种方法: 使用普通工厂中的方法创建对象(使用某个类中的方法创建对象,并存入容器中)
        第二种方法: 使用工厂中的静态方法创建对象(使用某个类中的静态方法创建对象,并存入容器中)
    2 bean对象的作用范围:
        默认是单例的, bean标签的scope可以调整
        scope取值:
            singleton: 单例的(默认值)
            prototype: 多例的
            request: 作用于web应用的请求范围
            session: 作用于web应用的会话范围
            global-session: 作用于集群环境的会话范围(全局会话范围), 当不是集群环境时,它就是session
    3 bean对象的生命周期:
              单例对象:
                  出生: 当容器创建时对象出生
                  活着: 只要容器还在,对象一直活着
                  死亡: 容器销毁,对象消亡
                  死亡: 单例对象的生命周期和容器相同
              多例对象:
                  出生: 当我们get对象的时候(使用对象)时spring框架为我们创建
                  活着: 对象只要是在使用过程中就一直活着
                  死亡: 当对象长时间不用,且没有别的对象引用时候,由Java的垃圾回收器回收
